VM implementation
=====================================
The task revolves around creating a simple virtual-machine
which processes files provided with this document.

Please be considerate of the fact a human will need to read any source code
you provide and as such you should try to keep this neat and commented where
appropriate.

I expect the time needed to complete this task is 6-8 hours. 


Submitting Your Answers
=======================
Please provide your source code in python file along with 'result.txt' (i.e. output from running your VM on the task1.bin file).

Zip these files with the name of the file as follows:
rollno_assign1.zip  e.g. BSITF20M501_assign1.zip

Task - Creating the VM
========================
For this part of the exercise the primary goal is to create a VM following the specification below. Once implemented, the VM will be able to execute the provided 'task1.bin' program image which when run will reveal the second task.

Executing the provided program images is a two step process. Firstly, the files must be loaded into memory. Once loaded, their contents must then be
interpreted as a mix of instructions and data values. As instructions are
processed output will be produced one-byte-at-time as ASCII text.


Loading VM images
-----------------
The VM images themselves are ASCII text with UNIX-style line-endings. They
consist of a series of 32-bit signed integers in hexadecimal only. To load these files, use the following process:

1. Read the first 32-bit signed value. We shall call this value
   'data-size'.

2. Allocate an array called 'data' of signed 32-bit integers capable of holding 'data-size' elements. This array should be indexable from 0 to (data-size - 1) (inclusive).

3. Read the second 32-bit signed value. We shall call this value 'image-size'.

4. Read 'image-size' values sequentially into the 'data' array
   starting from index 0.


Interpreting VM images
-----------------------
Once loaded into memory, the VM images are executed by interpreting their
instructions one at a time from the 'data' array.

During execution program state will be held in the data array and two 32-bit
signed variables (registers):
* 'ip' - initialised to 0.
* 'sp' - initialised to 'data-size'.

General execution in the VM operates as expressed below in pseudo-code:

Do
	current instruction = data[ip]
	ip = ip + 1
	decode instruction	
	perform action based on operation (see below)
Loop forever

Instructions are decoded by breaking them into three parts: 'binop',
'operation' and 'optional data'. These are stored as bit-fields within a
single 32-bit instruction as follows:

         binop (1 bit)
        /
      +--+----------+-----------------------------+
      |  |operation | optional data               |
      |  |(7 bits)  | (24 bits)                   |
      +--+----------+-----------------------------+
Bit: 31 30  ...    23             ...             0

Actions to be performed based on the 'operation' are defined below.


VM Instructions
---------------
VM Operations are divided into two classes based on the 'binop' bit at the
top of the instruction. Instructions in both classes are defined below.

Note that many of these use the functions "f" and "g" which are defined by the
following pseudo-code:

f(v):
	sp = sp - 1
	data[sp] = v

g():
	v = data[sp]
	sp = sp + 1
	return v


Binop = 0 instructions
----------------------
operation = 0 - "pop"
sp = sp + 1


operation = 1 - "push <const>"
f(optional data)


operation = 2 - "push ip"
f(ip)


operation = 3 - "push sp"
f(sp)


operation = 4 - "load"
addr = g()
f(data[addr])


operation = 5 - "store"
st_data = g()
addr = g()
data[addr] = st_data


operation = 6 - "jmp"
cond = g()
addr = g()
if cond is not equal to zero then set ip = addr


operation = 7 - "not"
if g() equals 0 then f(1) else f(0)


operation = 8 - "putc"
output exactly one byte = (g() & 0xff) to stdout
Note: Output from the supplied VM images will always be ASCII text when
functioning correctly and will use '\n' (= 0x0A) to indicate new-line.


operation = 9 - "getc"
x = read exactly one byte from stdin
x = cast x to 32bits
f(x & 0xff)


operation = 10 (0x0A) - halt
Stop execution


Binop = 1 instructions
----------------------
All the instructions in this class involve getting two values, a and b,
using g() and storing the result using f() as follows:
b = g()
a = g()
f(a <op> b)

The exact <op> depends on the value of the 'operation' field as follows:

0 => add, <op> is  +
1 => sub, <op> is  -
2 => mul, <op> is  *
3 => div, <op> is  /
4 => and, <op> is  &
5 => or,  <op> is  |
6 => xor, <op> is  ^
7 => eq,  <op> is  =
8 => lt,  <op> is  <

Notes:
* For all operations, a and b and the result of <op> should be treated as
  signed 32-bit integers.

* For eq and lt, the result of the <op> should be exactly 0 or 1 only.
  E.g. 1 < 10 => 1 and 10 = 10 => 1.

* Division must be evaluated as integer division, with the result
  truncated. E.g. 3 / 2 = 1.


Test Suite
----------
As implementing any software from a spec is potentially error prone, a set of tests have been provided to help you debug your VM implementation.

These test programs have names of the form testXX.bin.  When executed, all of these tests should print a single ASCII 'X' character and exit immediately. A set of testXX.asm files illustrate which aspects of the VM the corresponding .bin file is testing. It is NOT necessary as part of this exercise to implement software to process the .asm files.

Note there is no test of 'getc' functionality.
